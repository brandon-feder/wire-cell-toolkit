/** Ar39 spectrum for C++ testing.  For real app these arrays should
 * go into a Jsonnet file.
 */

#ifndef WIRECELLGEN_TEST_AR39
#define WIRECELLGEN_TEST_AR39

#include <vector>

/* Take from arXiv:1705.05726v1

   Digitize with "engauge", then run ipython:

   import numpy, csv
   dat = list(csv.reader(open("ar39.csv")))
   e = numpy.asarray([float(d[0]) for d in dat[1:]])
   p = numpy.asarray([float(d[1]) for d in dat[1:]])
   ereg = numpy.linspace(0,1,101)
   preg = numpy.interp(ereg, e, p)
   pregn = preg/numpy.sum(preg)

   ereg
   preg

   # copy-paste

   If test_blipsource is run it will spit out some JSON config for the
   PDF in terms of number of electrons given some simplifying
   assumptions.

 */

namespace WireCell {
    namespace Gen {
        namespace Test {

            const std::vector<double> ar39_mev{
                0.,   0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1,  0.11, 0.12, 0.13, 0.14, 0.15, 0.16,
                0.17, 0.18, 0.19, 0.2,  0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3,  0.31, 0.32, 0.33,
                0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4,  0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5,
                0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6,  0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67,
                0.68, 0.69, 0.7,  0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8,  0.81, 0.82, 0.83, 0.84,
                0.85, 0.86, 0.87, 0.88, 0.89, 0.9,  0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.};

            const std::vector<double> ar39_pdf{
                0.01947907, 0.01965097, 0.02009827, 0.02073114, 0.02122578, 0.0217205,  0.02220004, 0.02266917,
                0.02299656, 0.02337743, 0.02365564, 0.02388039, 0.02412927, 0.02432756, 0.0244995,  0.02463332,
                0.02480227, 0.0248433,  0.02489306, 0.02489379, 0.02484847, 0.02479329, 0.02466986, 0.02449811,
                0.02432513, 0.02403747, 0.02370043, 0.02337367, 0.02301038, 0.02256582, 0.02205115, 0.02145659,
                0.0208491,  0.02014801, 0.01940368, 0.01863213, 0.01790748, 0.01701706, 0.01611073, 0.01509436,
                0.01407524, 0.01303835, 0.01189252, 0.01077648, 0.00969766, 0.00867891, 0.00744269, 0.00638136,
                0.00538706, 0.00420577, 0.00333149, 0.00247285, 0.00170846, 0.00106269, 0.00042031, 0.00026583,
                0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583,
                0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583,
                0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583,
                0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583,
                0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583,
                0.00026583, 0.00026583, 0.00026583, 0.00026583, 0.00026583};
        }  // namespace Test
    }      // namespace Gen
}  // namespace WireCell
#endif
