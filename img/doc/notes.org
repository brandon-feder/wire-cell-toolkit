#+title: WIP Notes
#+LATEX_HEADER: \usepackage{svg}

* Tiling

The ~img/test/test-pdsp.jsonnet~ file can configure to run either full or fast sim+sigproc (fast is the new ~DepoSplat~ component).  

#+BEGIN_EXAMPLE
rm -f test-pdsp.npz test-pdsp-*.json && wire-cell -c img/test/test-pdsp.jsonnet  
#+END_EXAMPLE

This makes a bunch of JSON files, one per slice.  Any number of these
can be can converted to a VTK unstructured grid file (~.vtu~) of blobs:

#+BEGIN_EXAMPLE
python util/test/blob2tvtk.py test-pdsp test-pdsp-???.json
#+END_EXAMPLE

It also makes a Numpy file which can be converted to a VTK point (~.vtp~) file of depos:

#+BEGIN_EXAMPLE
  ./util/test/depo2tvtk.py test-pdsp.npz - 3695*units.mm/speed
  # --> makes test-pdsp-depos.vtp
#+END_EXAMPLE

As hinted by the argument here, there is currently an arbitrary time
offset that needs to be applied to get depos and blobs to line up in
the display.

You can individually load a ~*.vt*~ file into ~paraview~.  This can be
tedious if one is in a debug loop and constantly reloading.  That
can be solved by making a Paraview data set file (~.pvd~) to include
some number of files:

#+BEGIN_SRC xml
<VTKFile type="Collection" version="0.1" byte_order="LittleEndian">
  <Collection>
    <DataSet timestep="0001" part="001" file="test-pdsp-blobs.vtu" name="blobs"/>
    <DataSet timestep="0001" part="002" file="test-pdsp-points.vtp" name="points"/>
  </Collection>
</VTKFile>
#+END_SRC

Then, when para paraview opens, just click "Apply".

Hit "s" and then select and in "Selection Display Inspector" you can
label cells or points by various values such as "indices" which can
then be matched to WC debugging logs.

A per-slice blobs can be viewed:

#+BEGIN_EXAMPLE
  python util/test/blob2tvtk.py test-pdsp-748 test-pdsp-748.json
  paraview test-pdsp-748-blobs.vtu
#+END_EXAMPLE

[[file:x.svg]]

On Mate desktop, paraview renders tool tips with white text on yellow
background which is unreadable.  [[https://community.slickedit.com/index.php/topic,14388.0.html][This solution]] works.  Install ~qtconfig~, "Appearance" tab, "Tune Palette..." button "ToolTipBase" and "ToolTipText" under "Central color roles".  Pick nicer color (I just made text black) and save.


* 

